<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
  xmlns:context="http://www.springframework.org/schema/context" 
  xmlns:tx="http://www.springframework.org/schema/tx"
 xmlns:task="http://www.springframework.org/schema/task"
 xmlns:aop="http://www.springframework.org/schema/aop" 
 xmlns:p="http://www.springframework.org/schema/p"  
 xmlns:mvc="http://www.springframework.org/schema/mvc"  
 xmlns:cache="http://www.springframework.org/schema/cache"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
 xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
      http://www.springframework.org/schema/cache  
      http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
      http://www.springframework.org/schema/task
      http://www.springframework.org/schema/task/spring-task-4.1.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">

   <!-- 基本配置  -begin-->
  
      <!-- 自动注入 -->
      <context:annotation-config/>
      <!-- 自动扫描包  组件扫描-->
      <context:component-scan base-package="com.mybatis"></context:component-scan>
      
      
      <!-- 注释驱动 -->
     <mvc:annotation-driven/> 
      
      <!-- 配置不用DispatcherServlet 拦截的路径 -->
      <mvc:resources location="/res/" mapping="/res/**"/> 
      <!-- 默认分发处理器不会拦截静态资源 -->
      <mvc:default-servlet-handler/>
      
      
      <!-- 默认地址栏访问跳转到首页 -->
      <!-- <mvc:view-controller path="/" view-name="forward:/index"/>  -->
      <!-- 也可以利用<mvc:view-controller/>配置错误页面的跳转 -->
      
      <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
      <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
            </list>
        </property>
    </bean>
          
    <!-- 视图解析器 -->
  	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<property name="prefix" value="/WEB-INF/html"></property>
		<property name="suffix" value=".html"></property>	 
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>  
	</bean>	  
	  
	<!-- 引入项目配置文件 -->
		
    <!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list>
					<value>classpath:dbconfig.properties</value>
				</list>
			</property>
	  </bean> -->
	  <context:property-placeholder location="classpath:jdbc.properties"/>
		<!-- datasource 配置数据库 -->
		<!-- datasource -->
		<!--  destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用.-->
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >	
			<property name="driverClassName" value="${jdbc.driverClassName}"></property>
			<property name="url" value="${jdbc.url}"></property>
			<property name="username" value="${jdbc.username}"></property>
			<property name="password" value="${jdbc.password}"></property>
		</bean>
			 
       <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
				<property name="url" value="jdbc:sqlserver://localhost:1433;database=mlLogistics"></property>
				<property name="driverClassName"  value="com.microsoft.sqlserver.jdbc.SQLServerDriver"></property>
				<property name="username" value="sa"></property>
				<property name="password" value="qq920830"></property>
			</bean>  -->
			
	   <!-- mybatis配置 -->
	    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
	   		<property name="dataSource" ref="dataSource"></property>
	   </bean>
	   <tx:annotation-driven transaction-manager="dataSourceTransactionManager" />

    	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
    	    <property name="dataSource" ref="dataSource"></property> 
    	</bean> 
    	
    	
    	<!-- mapper bean  数据访问接口对应的实现bean
    		通过MapperFactoryBean创建出来。需要执行接口类全称和SqlSession工厂bean的引用。
    		如果注释了这个类时： 可在public interface StyleMapper 上加上注解@Transactional
    	-->
    	<!-- <bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
    		接口类全称
    		<property name="mapperInterface" value="com.mybatis.dao.StyleMapper"></property>
    		工厂bean
    		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    	</bean> -->
    
    
    	<!-- 扫描 -->
   	   <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    		<property name="annotationClass" value="org.springframework.stereotype.Repository"></property>
    		<property name="basePackage" value="com.mybatis"></property>
    		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
       </bean>  
    
	<!-- 基本配置  -end-->
	<!-- 拦截器 多个拦截器，顺序执行 -->  
<!--      <mvc:interceptors>
        <mvc:interceptor>  
        	<mvc:mapping path="/**"/>  
          	<bean class="com.mybatis.interceptor.LoginInterceptor"></bean>  
        </mvc:interceptor>  
    </mvc:interceptors> -->
</beans>